세션 토큰은 웹 사용자의 정보를 저장, 추적하기 위한 것
웹 서버가 웹 브라우저들에게 발급하는 인식표 정도로 생각하면 됨
인식표를 브라우저가 한번 받으면 요청을 할 때마다 포함해서 보내게 되는데
그래서 가능한 것이 세션 하이재킹, 중간에 쿠키를 알아내서 다른 사람의 쿠키를 포함한 패킷을 보내서
다른 사람의 정보에 접근할 수 있음
쿠키는 세션정보를 저장하기 위한 세션 쿠키와 persistent 쿠키로 나눌 수 있음
세션 쿠키 = 세션
persistent 쿠키 = 쿠키

세션 쿠키는 웹 브라우저의 Cache에 임시 저장, 브라우저를 닫거나 서버에 의해서 지워지는 경우
Persistent cookie 하드디스크에 txt형태로 저장, 만료날짜가 지나거나 수동으로 지우면 지워짐

세션 쿠키는 사용자 정보를 유지하기 위한 사용
persistent cookie는 사이트 재 방문시 사용자 정보를 기억하기 위해서 사용

세션 쿠키는 초기 접속할 때 전송할 쿠키가 없지만 persistent 쿠키는 저장된 쿠키를 전송

persistent cookie는 개인화된 컨텐츠를 제공하기 위한 정보로 사용
-> 개인정보나 사용자취향 장바구니 정보
클라이언트 관리 정보, 임시데이터 등

웹 사이트 접속시 persistent 쿠키 사용 절차, 64p

쿠키가 저장되는 위치는 웹 브라우저마다 차이가 있음
Record Delimiter는 쿠키가 여러 개 있을 때 식별하기 위한 것
time 같은 경우에는 인코딩이 되어 있는 날짜 표현 방식, 디코더를 이용해야지만 값을 볼 수 있음
파일 시스템 같은 경우도 인코딩을 해서 저장, 그것을 확인하려면 디코더 툴이 필요

로컬 컴퓨터에서 쿠키 확인
C:\Users\Administrator\Cookies
로 접근
폴더 보이게 하고, 보안 고급에서 거부 권한 풀어주기
C:\Users\Administrator\AppData\Roaming\Microsoft\Windows\Cookies
여기 경로에도 쿠키가 있음
쿠키 아무거나 워드패드로 열어볼 것
알드라이브에서 Dcode 다운 받아서 압축 풀고 실행
add bias는 표준 시간 설정, decode format은 windows: cookie date(lo value, hi value)
value to decode에 쿠키에 숫자 정보 입력
1573124864
30802291
인 경우 1573124864,30802291를 value to decode에 입력하면 시간 정보로 디코딩 해서 보여줌

세션은 여기까지 하고 다음은 웹취약점 체크리스트를 확인해볼 것

웹 취약점 리스트

보안 점검을 할 때 취약점 리스트를 만들어 놓고, 하나하나 확인해가면서 문제가 있는지 확인
웹 같은 경우 OWASP을 통해서 체크함, 면접에서 자주 물어보는 내용 중 하나(+OSI7 Layer)
OWASP은 3년 정도 주기로 웹 사이트를 대상으로 어떤 공격이 이루어졌고, 피해가 큰 것은 무엇이었는지 고려해서 TOP10을 선정해서 보여줌
알드라이브에서 받은 것이 2013년, 2017년 OWASP 
2017년 5페이지 확인, 
owasp는 새로운 버전이 나올 때 마다 이전과 어떻게 바뀌었는지 비교해줌
원래 큰 변동은 없었는데 2017년도는 조금 바뀜
xxe는 서버 사이트 리퀘스트 쿼저리? 서버쪽에서 xml 조작
7페이지는 간단한 설명
이후 페이지에서 자세하게 설명
1. 인젝션
- 명령어나 쿼리문의 일부분이 인터프리터로 보내져서 공격자가 악의적으로 데이터에 접근
2. 취약한 인증
 - 인증 및 세션 관리 관련, 세션 하이재킹도 이부분, 공격자들이 암호, 키, 세션 토큰을 위험에 노출
3. 민감한 데이터 노출
 - 데이터베이스에 저장된 사용자의 정보나 웹서버에서 사용하는 노출이 되면 안되는 정보, 개인 식별 정보는 정보들을 보고 특정인을 구분할 수 있는 것을 개인 식별 정보라고 함, 이러한 정보는 데이터베이스에 저장이 될 때 암호화 되어서 저장이 되어야하는데 그렇지 않은데 데이터베이스가 노출되면 정보가 노출됨
웹서버와 데이터베이스가 떨어져있는 경우에도 암호화 통신이 필요, 그렇게 저장되어 있지 않으면 정보가 노
출, 웹 브라우저와 주고받을 때도 노출이 될 수 있음
데이터베이스에 접근하기 위해서 권한 설정이 되어 있는 파일이 노출이 되는 경우도 위험, 이부분은 아래쪽에 취약한 접근 통제와 연관
4. xml 외부 개체
- 최근에 생긴 취약점은 아니지만 중요도가 떨어져있었음, 몇년 사이에 공격이 많이 이루어져서 올라간 듯
xml은 외부에서 개체를 참조해서 가지고 올 수 있는데 이러한 환경을 확인하면 웹서버에 영향을 줄 수 있는 코드를 전달, 알드라이브에서 받은 텍스트 파일을 보면 부가 설명이 되어 있음
Billion Laughs는 dos 공격=서비스 거부 공격, 엄청 많은 데이터를 xml로 보내고 parser에 부담을 준다.
5. 취약한 접근 통제
- 익명 인증으로 접근할 수 있는 개체가 있고, 일반 사용자들이 들어와서 접근할 수 있는 개체가 있을 것이고, 일반 사용자이기는 하지만 그 레벨에 따라서 접근할 수 있는 자료들이 있을 것, 접근 권한을 확인해서 접근해야할 것인데 그것을 제대로 하지 않음
url을 통해서 접근할 수도 있음, 버튼을 없애도 그 경로를 알게되면 url을 통해서 접근할 수 있음
관리자 페이지 같은 경우에는 관리자 ip 주소 까지도 확인을 해봐야함
6. 잘못된 보안 구성
- 브루트포스 공격 같은 것들이 보안 잠금 정책이 걸려있지 않으면 금방 공격 당하게 됨
- 웹서버는 디렉토리 리스팅이라는 서비스를 제공, 특정 디렉토리에 접근했을 때, 해당 디렉토리의 기본 문서가 없으면 그 디렉토리 내부의 디렉토리나 파일 목록이 드러남, 관리자가 필요해서 가능하게 해놓았다고 하더라도 사용이 끝나면 바로 해제해줘야함
- HTTP 헤더, 서버헤더 같은 경우 서버에 대한 정보, 서버 종류, 버전 정보가 들어감, 정보 수집 대상, 서버 헤더를 감추거나, 적어도 버전 정보는 없애야함
- sql 인젝션 공격은 일부러 error를 만들어서 에러 메시지에서 정보를 습득하는 것, error 메시지를 사용자에게 보이지 않도록 해야하는 방법이 있는데 이런 부분도 중요, 패치나 업그레이드도 중요
- 패치는 왠만해서는 안하는게 좋음, 그래서 실제로는 다른 서버에 환경을 구성해서 패치해서 정상적으로 작동하는지 실행해보고 패치함
7. 크로스 사이트 스크립팅은 악의적으로 코드를 만들어서 웹서버에 전송, 그 방법은 웹서버에 올림, 웹브라우저 단에서 다른 사용자를 공격, 할 수 있는 기능이 악성코드까지는 아니더라도 상당한 기능들을 가지고 있음, 대표적인 공격이 세션하이재킹, 스니핑은 같은 네트워크만 가능, 아니면 다른 추가 설정이 필요, 세션을 알아낼 수 있는 다른 방법 중 하나가 크로스 사이트 스크립팅, 아니면 접근하자마자 만들어져있는 사이트가 있다면 그 페이지로 유도, 클릭이 아니라 게시판 같은 것을 보자마자 바로 리다이렉션, drive by download 공격
이것을 막을 수 있는 방법이 HTML 인코딩, 다른 방법도 있음 요즘 웹 브라우저는 스크립트 실행을 차단시킴 -> 이것은 큰 효과가 없음, 사용자가 금방 풀어버리기 때문에 보조적인 수단으로 사용할 수 있음
8. 역직렬화
- 직렬화 : 어떤 프로그램이 사용하는 데이터를 네트워크를 통해서 전달하거나, 파일을 저장할 때 하는 것이 직렬화, 다른 프로그램들과의 호환성을 위해서 직렬화해서 데이터를 전송
- 역직렬화 : 직렬화되어서 전송된 데이터를 다시 원래대로 되돌리는 것
- 역직렬화 할 때 정보들 사이에 악의적인 코드가 있어서 사용자를 공격하는 것
9. 알려진 취약점이 있는 구성요소 사용
- 대표적인 것이 워드프레스, 오픈소스, 간단하게 웹페이지 또는 게시판을 만들수 있게 해주는 프로그램
- 제로보드와 비슷
- 워드 프레스가 생각외로 굉장히 많이 사용됨, 문제는 워드 프레스 오픈소스 자체는 문제는 없는데 여기에 추가해서 사용할 수 있는 addon 환경 또는 component 들 때문에 웹 보안 문제가 발생
10. 불충분한 로깅 & 모니터링
- 최근 중요하게 생각하는 것이 모니터링, Cert(computer emergency response team)

한가지 누락이 되었던 것
2013년도에 8위 csrf
cross site request forgery
- 공격을 받으면 아무것도 안하고 게시글만 봤는데 의도하지 않은 요청을 서버에 보냄

웹 해킹 툴
취약점 스캐너 : 웹 취약점을 점검해주는 프로그램, 웹 사이트의 취약점을 스캔하고 공격자에게 알려줌
오픈 소스로 되어 있는 것도 있고, 돈을 받고 파는 것도 있음
안랩 같은 경우도 2가지 정도 툴을 사용, 한 가지 툴을 사용하면 빠뜨리는 경우가 생기기 때문에
작업 시간을 줄여줌, 점검하는 방법이 다 있어서 할 수 있지만 직접하면 시간이 걸리기 때문에 
오픈소스보다는 파는 프로그램이 더 좋음
appscan 은 예전에는 좋았는데 요즘은 별로라는 이야기도 있음, 가격은? 버전에 따라서 다른데 비싼건 1억정도, 그 비용은 사후 지원 비용까지 포함되어 있기 때문에, 물론 크랙 버전이 있긴하지만 공개적으로 사용할 수는 없기 때문에, 원하면 크랙버젼을 줄 수는 있음
웹 프록시 툴 : paros가 쓰기는 편하지만 실제로는 burp suite을 많이 사용, 패킷 조작, 딕셔너리 어택 등을 할 수 있음

본격적으로 정보수집을 알아봄
해킹은 정보 수집이나 타겟을 정하는 것으로 시작
타겟이 없을 때 정보를 수집할 수도 있고 타겟을 정해서 정보를 수집할 수도 있음
웹 서버를 대상으로 하는 정보수집은 서버 종류를 먼저 파악
해당 웹서버의 해당 버전의 강제적으로 가지고 있는 취약점이 무엇인지 검색
보안 패치가 되어 있으면 막혀있을 수 있지만, 실제 보안 관리자는 그렇게 부지런하지 않음

Banner Grabbing : 응답 메시지 헤더에서 서버 정보를 얻는 것, 배너라고 하는 것은 받는 메시지, 사전에서 찾아보면 현수막, ip 환경에서 배너는 안내메시지를 사용할 때 사용

xp에서 webhack 사이트에 접속하고 paros에서 response 패킷을 확인 server 헤더 정보를 확인할 수 있음
Microsoft-IIS/5.0
centos 4.4로 가서 아파치, mysql 서비스 시작하고 서버주소/aircon으로 접속, reponse 패킷 확인
Apache/2.0.52 (CentOS)

지금은 노출되어 있도록 설정이 되어 있는 상태인데 설정이 차단 되어 있는 경우는 툴을 사용
알드라이브에서 httprint_win32_301 파일 받아서 압축 해제
파일을 보면 signatures 텍스트 파일을 워드패드로 열어보면 원리를 정확하게는 모르겠지만 예상하는 것은 http파일이 시작을 하면 이 툴이 icmp 기반으로 신호를 보내고 응답이 오면 그 응답을 보고 웹서버가 보내는 독특한 패턴이 있어서 그 패턴을 보고 찾아내는 것
httprint_gui 실행해서 host는 웹서버 정보, port는 자동으로 80으로 될 것
webhack, aircon 사이트 서버 정보를 등록하고 아래 쪽에 플레이버튼을 클릭하면 서버 정보를 스캔

만약에 서버 헤더를 숨겨놓았다면 banner reported 정보는 나오지 않음, banner deduced는 툴이 알아낸 정보
 
점심 먹고 그다음 정보 수집

www.netcraft.com 접속 -> internet data mining -> 웹서버들 별로 사용하는 빈도를 확인 
what's that site running? 에 도메인을 입력하면 도메인에 있는 호스트 들의 정보를 얻을 수 있음
호스트 이름 옆에 문서들을 클릭하면 세부적인 ip 정보 및 os, 웹서버 정보를 볼 수 있음

http://archive.org/
archive 기록 보관소, 아주 방대한 기록을 보관하고 있는 것이 archive
web페이지를 돌아다니면서 페이지 정보를 긁어 모음

Web Spidering
그다음 수집 대상은 웹 어플리케이션 구조
어떤 디렉토리를 사용하고 디렉토리 안에 어떤 파일이 있는지 확인
수작업에 의한 정보 검색이 가능 -> Paros로 모든 페이지를 접속하면 디렉토리가 구성될 것
그것을 자동화한 것인 Spidering 툴 -> paros, burp spider, webscarab, web crawler
자동화된 툴 이용시 문제
자동화된 작업을 할 수 없는 상황이 발생할 경우 문제 -> 요즘에 어떤 사이트는 접근을 했을 때 동적으로 만들어지는 페이지들은 탐색할 수 없고, 페이지에 접근할 때 일회성 정보를 포함해서 url이 생성되는 경우에는 무한 루프에 빠질 수 있음
세션 관련 정보는 수작업으로 처리

실습
xp에서 파로스로 aircon 서버의 aircon 폴더 오른쪽 클릭 -> spider -> 기다렸다가 start 클릭

이러한 공격을 막는 가장 흔한 방식이 블랙리스트 방식, 누군가 공격을 새로운 패턴으로 만들면 탐지하지 못함, 이렇게하면 공격 패턴 가지고는 확인할 수 없기 때문에 어떤 행동을 가지고 판단할 수도 있음
시나리오를 만들어두고, 특정한 행동이 이루어질 때는 주의 대상으로 지정해서 확인
포트스캐닝, tracerout, 핑테스트등 
짧은 시간에 요청을 많이 하고 주소가 계속 바뀜 이것은 dos도 아니고 불법은 아니지만 의심스럽기 때문에 주의할 리스트에 올려놓고 확인
나오지 않는 데이터도 있음

Directory listing 취약점이 있으면 모든 정보를 확인할 수 있음, 원래는 맨 뒤에 있는 내용이지만, 정보 수집을 할 수 있는 방법이기 때문에 지금 확인

웹 서버의 잘못된 환경설정으로 인해 디렉토리와 파일목록을 노출하게 됨

대응책
- 모든 디렉토리에 Default File을 위치시킴
- IIS : 인터넷 서비스 관리자에서 디렉토리 검색 체크해제
- Apache: httpd.conf의 모든 디렉토리의 indexes 제거

실습
xp에서 webhack 사이트에 ip/member/ 로 디렉토리만 입력하면 디렉토리 내용이 나옴
aircon 사이트도 ip/aircon/member/ 로 디렉토리를 입력하고 확인할 수 있음
그리고 아파치 같은 경우 서버 정보, ip, 포트 번호까지 볼 수 있음

iis에서 directory listing 해제
webhack site 등록정보 -> 홈디렉터리 -> 로컬 경로의 디렉터리 검색 해제
다시 webhack site에 디렉토리로 접근하면 directory listing이 거부된 것을 확인할 수 있음

아파치에서 directory listing 해제
[root@localhost ~]# vim /etc/httpd/conf/httpd.conf
    290 <Directory "/var/www/html">
    304     Options Indexes FollowSymLinks  -> Indexes 제거 후 아파치 재시작하고 다시 확인
    519 Alias /icons/ "/var/www/icons/"
    520
    521 <Directory "/var/www/icons">
    522     Options Indexes MultiViews

구글에서 site:co.kr intext:"index of" 검색
directory listing 설정이 되어 있는 사이트 들을 확인할 수 있음
아파치 정보 숨기기 : http://trudy.kr/15
iis 정보 숨기기: https://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/

본격적인 공격은 다음에

CSS(client side script)

JavaScript
JScript&VBScript 잘 사용하지 않음

script에서 language 속성을 통해서 사용할 script 언어를 지정할 수 있음, 지정하지 않으면 JavaScript가 기본

SSS(server side script)

IIS 에서는 ASP, 아파치에서는 PHP를 많이 사용

PHP는 사용 점유율이 높음, 보안 상에 문제가 많기 때문에 잘 사용해야함
언어가 어렵지는 않음, C 언어와 유사

JSP
보안성도 뛰어나고 좋지만 어렵다

실습
Win2K에서 인터넷 서비스 관리자 실행
webhack 사이트 오른쪽 클릭 -> 등록 정보 -> 홈 디렉터리 탭 -> 로컬 경로를 확인하면 C:\Inetpub\ 아래에 사이트 디렉토리가 위치해 있는 것을 확인할 수 있음
윈도우 탐색기를 열어서 해당 위치에 새로 파일을 생성, 이름은 test.asp -> notepad로 파일을 실행
-> 
<html>
<body>
Your Input Data = <%=Request.QueryString("string")%> 	// <% .. %> 가 asp 코드, Request.QueryString("string")
은 string이라는 parameter로 전달한 데이터를 가져오는 함수, 이 부분은 서버가 실행하고 클라이언트는 결과만 표시
<script>alert("Script Test");</script>
</body>
<html>
-> xp에서 win2K로 접속해서 확인, 10.10.0.10/test.asp?string=아무거나
-> paros에서 보내는 데이터를 확인해보면 우선 url에서 %16진수는 자동으로 url인코딩을 통해서 전달
-> response로 온 html 파일을 보면 작성할 때 사용한 asp 코드가 보는 것이 아니라 그 코드의 결과만 보임
-> SSS는 서버가 무엇을 어떻게 처리하는지에 대한 중요한 정보가 포함되기 때문에 사용자에게 노출이 되면안된다. 특히 쿼리문 같은 경우에 전달이 되면 안됨, SQL 쿼리문 같은 경우 SSS 포함되어 사용되기 때문에 클라이언트 쪽으로 전달될 일이 없음

ENCODING SCHEMA
인코딩을 왜 할까? 데이터를 전달할 때 전달하려는 데이터가 제대로 전달되지 않을 것 같은 환경에서 안전하게 전달할 수 있는 상태로 변환하는 것이 인코딩
네트워크 계층 1계층에서 인코딩을 함
웹에서도 이러한 인코딩 방법이 적용이 되어 있는데 가장 대표적인 방법이 ASCII 코드
ASCII 코드를 사용하는 이유? 컴퓨터가 처리할 수 있는 데이터가 숫자(2진수, 회로) 밖에 없음, 그 밖에 문자를 표현하기 위해서 사용
c언어에서 A를 저장하고 %d로 불러올 때 수가 나오는 것은 인코딩된 상태로 출력, %c는 디코딩해서 출력하는 것
URL Encoding
URL 주소 상에서 사용되는 인코딩, URL 상에서는 원래 문자의 의미 외에 다른 의미, 기능이 있는 meta character가 있는데 그 meta character 들이 가지고 있는 원래 의미로 전달이 되지 않을 것 같을 때 인코딩을 해서 데이터를 전달
브라우저에 따른 URL Encoding 문자의 차이가 있음
따라서 자동으로 인코딩이 되는 문자가 있고, 의도적으로 인코딩해주어야 하는 문자가 있음

잠시 쉬었다가 URL 인코딩 테스트
xp에서 10.10.0.10/test.asp?string=You&I 로 이동
paros에서 확인해보면 You까지만 전달됨 &는 parameter들을 연결하는 meta character 이기 때문에 url 인코딩이 되지 않으면 글자 그대로 전달되지 않음
&는 ASCII 코드로 26이기 때문에 %26으로 바꿔서 접속하면 & 이후가 그대로 전달되는 것을 볼 수 있음

인코딩의 또다른 목적은 보안 장비를 우회하는 것이 될 수 있다. 보안장비가 인코딩된 문자열을 일일이 디코딩을 해서 확인을 하지 않는다면 인코딩되서 전달된 문자열을 확인할 수 없다.
이러한 것은 Force Full URL Encoding이라고 한다.

Force Full URL Encoding
10.10.0.10/test.asp?string=3 and (select * from member) > 0
-> sql 인젝션이라는 방법을 이용해서 공격을 하는 것 실제로는 더 복잡함

http://10.10.0.10/test.asp?string=3%20%61%6E%64%20%28%73%65%6C%65%63%74%20%2A%20%66%72%6F%6D%20%6D%65%6D%62%65%72%29%3E%30
-> 이렇게 입력해도 브라우저에서 사이트에 접속할 때는 알파벳은 전환되어서 표시됨
16진수 변환 사이트
http://www.unit-conversion.info/texttools/hexadecimal/

HTML Encoding
웹 페이지를 작성할 때 몇개는 사용해봄
대표적인 것이 공백이나 태그기호(<>)
HTML 문서 내에서 특별한 기능을 수행하는 문자들이 브라우저에 그대로 표현될 수 있도록 인코딩
자주 사용하는 기호는 ASCII 코드가 아니라 상수로 정해놓기도 함
lt : less than
gt : grater than
XSS 공격에 대응하기 위한 방법으로 사용됨
XSS : 는 cross site scripting 웹서비스를 사용하는 이용자를 대상으로 하는 공격
악의적인 스크립트를 만들어서 게시판에 올림, 해당 게시글을 읽은 사용자는 그 스크립트를 받아서 그대로 실행, 공격 대상을 해당 스크립트를 읽어들이는 브라우저 또는 컴퓨터
해당 공격이 이루어지려면 스크립트를 포함하고, 실행을 해야하는데 이것을 방지
스크립트를 실행할 수 있는 코드들을 다 인코딩해서 삭제시킴 또는 인코딩한 상태로 전송 
게시판은 아니지만 

<html>
<body>
Your Input Data = <%=Request.QueryString("string")%>
<script>alert("Attack!!!");</script>
</body>
<html>
이런 식으로 게시판에 글이 올라오면 스크립트가 실행될 수 있음
이것을 저장할 때 인코딩을 해서 저장을 하던지
&lt;script&gt;alert("Attack!!!")&lt;/script&gt;
저장은 그대로 하되 전달할 때 인코딩을 하던지하면 
공격을 방지할 수 있음

Multi Byte Code
ASCII 코드만 가지고는 다른 언어를 표현 할 수 없기 때문에 다른 코드들을 사용
Unicode나 UTF-8 같은 코드 들을 사용하는 방법은 직접 찾아볼 것 

그리고 중요한 것이 Base 64 인코딩인데 잠시 쉬었다가 알아볼 것 알드라이브에서 Base64 관련 자료 다운

Base64
MIME : Multipurpose Internet Mail Extensions, 표준으로 사용
2진 데이터를 ASCII 형태의 텍스트로 표현
64인 이유는 구성하는 문자가 64개 이기 때문에
6bit를 한 문자로 표현
6bit로 데이터를 전달하면 길이가 안맞는 경우가 있는데 이경우 =를 패딩 값으로 사용
이메일 첨부 파일들을 인코딩해서 SMTP를 통해 전송하거나 HTTP 승인을 할 경우 인증서를 인코딩할 때 사용
입력 데이터를 세 블록으로 나눔, 각 블록은  6비트씩 네 부분으로 나누어짐

입력 데이터의 마지막 블록이 출력 데이터의 세 블록보다 작게 나왔으면 출력은 하나 또는 두개의 문자들로 채워진다.
-> 확인
입력으로 M a n이 들어왔다고 하면
M a n 은 ASCII 코드로 77 97 110
이것을 2진수로 변환
01001101 01100001 01101110
이것을 합친 상태에서 6bit 씩 자른다
010011 010110 000101 101110
19        22       5          46
이것을 base64표에 따라서 변환
T W F u
지금 같은 경우에는 입력된 데이터가 8bit 데이터 3개가 입력이기 때문에 6bit로 딱 떨어지지만 그렇지 않은 경우도 있음

예를 들어서 
M a
010011 010110 0001 로 나누어진 경우
010011 010110 000100 뒤에 00을 추가하고
19        22       4
T          W        E       하고 =를 붙임
base64 인코딩 숫자는 항상 4의 배수

이번에는 M
01001101
010011 010000
19        16
T          Q       =        = 
따라서 base64 인코딩 숫자는 항상 4의 배수
만약 보내온 데이터가 4의 배수 비트이고 뒤에 = 또는 ==가 붙어있다면 Base64일 가능성이 높다
=없이 4의 배수 비트가 왔을 때는 Base64인코딩인지 아닌지 판단할 수 없기 때문에 디코딩해서 의미있는 데이터인지 판별해볼 수 있다. 
이메일 환경에서 주로 사용되고, 우리가 관심이 있는 것은 웹 인증

webhacking.kr : 코드게이트에서 문제를 출제했던 사람이 만들어 놓은 사이트 로그인을 해보면 웹 해킹 관련 문제들이 있음

회원 가입 
<!--
Register
===========================================
<input type=button value='Register' onclick=location.href='join/includ2_join__frm__0001.php?mode=a62b0fbbe3f146c45a01ce45f8dfc7a9' style=width:50pt;height:20pt;border:0;background:black;color:lightgreen></td></tr>
===========================================
-->

decoding은 base64를 여러 번 디코딩해서 ip주소를 찾아서 입력
디코딩을 해보면 강의실의 공인 ip 주소가 나옴



<?
if(!$_COOKIE[user_lv])
{
SetCookie("user_lv","1");
echo("<meta http-equiv=refresh content=0>");
}
?>
<html>
<head>
<title>Challenge 1</title>
</head>
<body bgcolor=black>
<center>
<br><br><br><br><br>
<font color=white>
---------------------<br>
<?

$password="????";

if(eregi("[^0-9,.]",$_COOKIE[user_lv])) $_COOKIE[user_lv]=1;

if($_COOKIE[user_lv]>=6) $_COOKIE[user_lv]=1;

if($_COOKIE[user_lv]>5) @solve();

echo("<br>level : $_COOKIE[user_lv]");

?>
<br>
<pre>
<a onclick=location.href='index.phps'>----- index.phps -----</a>
</body>
</html>


<!--2018-04-25 12:01:33-->


<style>
body, table, tr, td, p {font-weight:normal; font-size:9pt; line-height:14pt;}
A:visited {color: white;text-decoration: none;}
A:hover {color: white;text-decoration: underline;}
A:active {color: red;text-decoration: none;}
A:link {color: white;text-decoration: none; }
</style>

WEB AUTHENTICATION
웹 인증은 5가지 인증 방법을 사용
주로 사용되는 인증은 Anonymous Authentication, Form Based Authentication
Anonymous : 인증이 필요한 사이트에 접속이 될 때 자동으로 사용자가 모르게 익명으로 인증으로 받음, 운영체제에서 Guest 계정이라고 하면됨, 특별한 계정으로 접속해야 하는 데이터가 아니라 불특정 다수에게 접근을 허용한 데이터에 접근할 수 있게 해주는 것이 익명 인증
Form Based : 웹 서버가 데이터 베이스의 계정을 확인해서 인증을 해주는 것이 Form Based 인증, 인증에 사용되는 정보가 그대로 드러날 수 있기 때문에 SSL을 통해서 암호화 통신을 해야함
요즘은 자동으로 https 로 접속해서 모든 데이터 통신이 암호화 되어 있지만 예전에는 로그인하는 순간에만 암호화했었음

Basic : 웹 서버에 보낼 아이디와 암호를 Base64 방식으로 인코딩 후 전달, 기본 인증도 암호화 통신이 안되는 상황에서는 위험, 인코딩은 암호화가 아님, 따라서 암호화 되지 않은 환경에서 사용하면 안됨
또한 사용자 계정은 웹 계정이 아닌 웹서버가 사용하는 시스템 계정을 이용, 공격을 받았을 때 노출되는 것이 시스템 계정이라는 것은 더 위험
왜 만들었을까? 기본 인증이 있다는 것은 시스템 계정이 있다는 것, 시스템 계정은 관리자가 만들어야함, 즉 만든 이유는 웹 서버를 관리할 수 있는 사용자들을 대상으로 사용하기 위해서, 예를 들어 업무용으로 사용하는 웹사이트는 관련 사용자 이외에는 접근할 수 없어야함, 기본 인증을 적용하면 메인 페이지도 안보이고 처음부터 계정을 인증해야 함

Basic 확인
우선 Win2K 서버에 시스템 계정을 하나 생성
인터넷 서비스 관리자 -> webhack 사이트 오른쪽 클릭 -> 등록정보 -> 디렉터리 보안 탭 -> 익명 액세스 및 인증 제어 -> 편집 -> 

Windows 통합 인증? NTLM 인증, New technology lan manager, 윈도우 환경에서만 동작, 다른 환경은 지원하지 않음, NTLM 인증이 되어 있는 서비스라면 ID와 패스워드를 입력하지 않아도 접속 초기에 ID와 password를 서버로 전송, 로컬에서 접속한 시스템 계정 정보를 서버로 전송, 서버는 서버 자신이 확인할 수 있는 계정 정보를 확인, Active Directory 서비스가 활성화 되어 있으면 그곳에 있는 계정까지 통합해서 확인, NTLM v2는 초기 접속 인증이 실패하면 거기서 접속이 끊남, v1은 다시 계정 정보를 입력할 수 있도록 함
그 인증을 사용하겠다라고 하는 것이 Windows 통합 인증, 일반적인 웹사이트에서는 거의 사용하지 않음
Windows 도메인 서버의 다이제스트 인증 : Active Directory 환경과 통합되어 있어야만 사용할 수 있음, Active Directory 서비스에 등록되어 있을 때, 도메인 네임으로 인증? , 싱글 사이먼 제공, 중앙 서버로부터 인증을 받으면 다른 서버에 인증을 받을 필요가 없음, 놀이 공원 자유이용권과 동일
Active directory 같은 경우 기업에서 사용하기 때문에, 기업의 소속된 사람들만 사용을 할 때 사용, 보안성도 뛰어남

익명 엑세스 체크 해제, 기본 인증 체크, Windows 통합 인증 체크 해제
기본 인증 체크시에 경고창이 뜸, 데이터 암호화 되지 않는다는 내용

예->확인->확인 으로 적용

xp에서 웹 사이트에 접속을 하면 페이지가 보이기 전에 인증 계정 정보를 입력하라는 메시지가 뜸
아까 생성한 계정 정보 입력, 만약에 로그인 후 비밀번호 변경이 체크되어 있으면 패스워드를 맞게 입력해도 로그인이 되지 않음

계정 정보가 노출되는 지 확인
Backtrack에서 wireshark 실행, xp로 webhack 사이트 접속
wireshark에서 확인해보면 TCP three-hand shake가 끝나고 처음 HTTP로 get하는 패킷에서
authorization 에서 ID와 비밀번호 정보를 볼 수 있음
이 정보는 모든 request 요청에 포함되어 있고 base64로 인코딩해서 패킷을 보내지만
wireshark는 그것을 디코딩해서 보여줌
필터는 ip.dst==웹서버&&http 로 확인할 수 있음

기본 인증을 사용하고 싶으면 Active Directory에서 하는 것이 좋겠지만 그것이 번거롭다면 기본 인증만 사용하고 SSL 암호화를 하면 됨
잠시 쉬었다가 Webhack 사이트의 Form Based Authentication이 어떻게 이루어졌는지 살펴볼 것
webhack 사이트 인증 방법 원래대로

xp에서 webhack 사이트의 login 페이지로 이동하면  member/member_login.asp 파일을 확인할 수 있음
웹서버에서 파일을 열어서 확인

member_login.asp

<html>
<head>
<title>로그인 페이지</title>
<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">
<link rel="stylesheet" href="../text.css">
</head>
<body>

<%
	if	session("user_id") <> "" then		// 세션 user_id를 확인 <>는 not equal
%>
<%=session("user_id")%>님이 로그인되어 있습니다

<%
	else
	
%>
<form name="form" method="post" action="member_login_check.asp">	// 폼태그에서 submit을 하면 member_login_check.asp로 넘어감


<table width="245" border='1' cellpadding='1' cellspacing='0'>
    <tr> 
      <td width="90" align="center"><strong>ID</strong></td>	// ID 표시
	  <td width="145">	    <input type=text name=user_id style="border-style:solid;border-width:1px;" value="<%=Request.Cookies("user_id")%>">      </td>	// user_id라는 parameter에 담겨서 id 값 을 보냄
   </tr>
   <tr>
         
      <td align="center"><strong>Password</strong></td>
	 <td><input type=password name=user_pw style="border-style:solid;border-width:1px;">	 </td>
	// user_pw라는 parameter에 담겨서 password 값 보냄
    </tr>
    <tr> 
      <td colspan="3" align="center">        <input type=submit value="Log in">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  
<a href="./member_register.asp"><b>Join</b></a>      </td>
    </tr>	
</table>
</form>
<%
	end if
%>
</body>
</html>

member_login_check.asp	// 사용자 인증을 실제로 실행하는 asp 파일

<!--#include file="../dbconn.inc"-->

<%	--> 이 부분이 dbconn.inc 
Set DBconn = Server.CreateObject("ADODB.Connection")
mydb = "Database=webhack;UID=sa;PWD=webhack;"	// database 이름은 webhack id는 sa, pw는 webhack
DBconn.Open "Provider=SQLOLEDB;DRIVER={SQL server};Server=localhost;" & mydb	// 서버는 localhost
%>


<%
	id=request("user_id")
	password=request("user_pw")	// parameter 저장

'	response.write("id="+id+"<br>")		// 주석 처리된 문장 ' 로 주석 표시, php는 c언어와 동일한 주석 처리 문자 사용
'	response.write("password="+password)

	chkUser = false	// chkUser 변수에 처음에는 false 값을 저장

	strSQL="select user_id, user_pw, name, email, homepage from member where user_id='"&id&"' and user_pw='"&password&"'"
// select user_id, user_pw, name, email, homepage from member where user_id=' id변수 'and user_pw='password변수'
	set Rs=DBconn.execute(strSQL)	// 데이터베이스에 연결 후 쿼리 실행, 그 결과는 Rs에 저장됨

	if not Rs.eof then chkUser = true	// rs.eof는 rs가 참인 경우는 rs를 보자마자 파일의 끝을 봤을 때, 즉 데이터가 없을 때 

	if trim(id)="" or trim(password)="" then chkUser=false	// trim, 특정 문자열 앞 뒤 공백을 삭제
							// id와 패스워드가 제대로 입력되었는지 검증

	if chkUser then
		'세션 ID저장
		session("user_id")=Rs.fields("user_id")	// 세션에 id 값 저장
		'session("user_id") = id
		
		Rs.close
		set Rs=nothing

		DBconn.close
		set DBconn=nothing	// db 연결 종료
		
		'로그인에 성공한 경우 사용자 아이디를 넘겨주고 게시판으로 이동
		'response.redirect "../board/board_list.asp?user_id="&id
		response.redirect "member_ok.asp?id="&id	// member_ok.asp로 redirection

	else

		Rs.close
		set Rs=nothing

		DBconn.close
		set DBconn=nothing 그렇지 않으면 

%>
<script language=javascript>
	alert("아이디 없거나 패스워드가 일치하지 않습니다.\n\n");
	history.back();
</script>
<% end if %>

webhack 사이트는 id와 password를 모두 쿼리 문에 넣어서 sql 쿼리를 만들고 데이터를 확인해서 데이터가 있으면 로그인 성공 아니면 실패
이렇게 하는 것은 보안 상으로 큰 문제가 있음
나중에 sql injection 공격을 하면 인증 우회를 할 수 있음
예전에는 이런식으로 했었는데 요즘에는 이렇게 하지는 않음

여기까지 Form Based Authentication 확인
SSL 암호화가 되어 있지 않으면 id와 password가 모두 노출됨 

SESSION MANAGEMENT
http는 connection oriented 방식이 아님
세션 : 어던 일이 시작되는 지점부터 끝날 때까지, 웹 세션의 경우 다중 접속 환경 때문에 Connection Oriented한 성격을 잃어버림, 비 연속적으로 접근하는 클라이언트를 구분하기 위해서 Session Token을 사용
세션 토큰 : 세션과 관련된 정보가 들어있는 작은 데이터, 클라이언트가 서버에 접속하면 랜덤하게 만들어지는 id에 해당하는 토큰을 줌, 클라이언트는 웹 서비스를 요청할 때마다 토큰 번호를 제출, 어떤 웹 브라우저인지를 계속해서 구분해서 사용할 수 있음, 로그인을 하면 세션 토큰에 로그인 정보를 포함해서 로그인 여부도 알 수 있음
세션을 인증하기 위한 정보, 인증 관련 정보는 서버와 크라이언트 양쪽에 저장되어야 함
일반적으로 WAS에서 만들어주는데 거기서 지원하는 해쉬값이나 추가로 여러 정보를 담아서 토큰을 생성
웹 서버가 물리적으로 여러 대인 경우 WAS에서 발행한 Session id 만으로 인증 불가
WAS에서 지원하는 세션 토큰은 
ASP : ASPSESSIONID
JSP : JSESSIONID
PHP : PHPSESSIONID
일반적으로 이렇게 지원하지만 개발자가 변경할 수 있음

실제 그렇게 진행이 되는 지 확인

xp에서 웹브라우저 모두 종료, paros도 new session
다시 웹브라우저를 실행해서 webhack 사이트로 접속
처음 요청메시지의 응답 메시지를 보면 Set-Cookie 헤더를 통해서 정보를 주는 것을 확인할 수 있음, 이것이 세션쿠키정보
그럼 쿠키란?
세션 정보, 사용자 정보를 담고 있는 작은 데이터를 쿠키라고 함
세션 토큰이 실제로 구현되서 실행할 때 쿠키라는 데이터를 의미
WAS가 클라이언트 식별에 사용되는 정보를 클라이언트에게 저장하기 위해 가장 널리 사용되는 방법
response Header의 set-cookie 이용, javascript로 document.cookie를 통해 접근할 수 있다
쿠키를 발행한 사이트에서만 읽을 수 있고, 호스트마다 최대 20개 까지 사용가능,
지금 설명하는 것은 session 쿠키==세션, 세션 토큰, persistent 쿠키 == 쿠키

쿠키의 용도
 - 세션을 관리하기 위한 세션 토큰
 - persistent 쿠키 : 개인화된 컨텐츠 제공 정보, 클라리언트 관리에 필요한 정보, 임시 데이터 등을 포함, 하드디스크에 저장됨

Set-Cookie: ASPSESSIONIDASDCDTAQ=ICBNEFODBONNMBBHLKGDAFLG;
// 처음 응답받은 메시지에 포함된 헤더
Cookie: ASPSESSIONIDASDCDTAQ=ICBNEFODBONNMBBHLKGDAFLG
// set-cookie 헤더 응답을 받은 후 요청하는 메시지마다 포함되는 쿠키 헤더

실제 사용되는 쿠키 확인
네이버나 다음 같은 경우 로그인 전과 후의 쿠키가 달라짐
우선은 그냥 다음에 접속 후 url에 javascript:document.cookie 입력
지금도 복잡하게 되어 있는 것 같지만 로그인 한 후에 확인하면 더 복잡하게 나타남

이것을 어떻게 공격에 사용하는가?
XSS를 이용한 Session Hijacking 강의 자료에 나와있는 것
오늘은 Sniffing을 통한 Session Hijacking을 해볼 것

공격은 잠시 쉬었다가, backtrack에서 할것
backtrack 환경 세팅, backtrack 인터넷 접속 가능하도록 
알드라이브에서 Sources.list 파일을 /etc/apt 디렉토리에 덮어쓰기
paros를 설치할 건데 sources.list 파일이 최신 파일이 아니면 설치가 안됨

backtrack 터미널에서
apt-get update 입력
apt-get -y install paros 입력
paros& 파로스 실행

사용 방법은 동일
프록시 사용 설정
firefox 실행 -> edit 메뉴 -> preference 클릭 -> Advanced -> Network -> Connection에 Settings
Manual proxy Configuration 체크 후 HTTP Proxy는 127.0.0.1 Port는 8080으로 설정

sniffing을 이용한 hijacking공격
wireshark 실행 필터는 ip.dst==10.10.0.10&&http
backtrack ip 다시 설정 후 웹서버 접속
xp에서 webhack 사이트 로그인
xp의 요청메시지에서 cookie 찾아서 오른쪽 버튼 copy -> value

paros에서 tools 메뉴 -> filter 클릭
파로스는 패킷을 지속적으로 필터링해서 설정을 할 수 있음
replace http request header using defined pattern. 체크 -> ... 클릭
Cookie:* 를
Cookie: ASPSESSIONIDASDCDTAQ=ICBNEFODBONNMBBHLKGDAFLG 로 변경
backtrack에서 파이어폭스로 webhack 사이트에 접속해보면 로그인 한적이 없는데 회원 정보 변경 페이지를 볼 수 있음
만약에 쿠키 변환이 잘 안되는 경우, backtrack이 사용하는 쿠키 전체를 변환 전 문자열로 설정해볼 것

이런 공격에 대한 방어는 암호화 통신이 좋을 것
XSS 같은 경우 출발지 ip 주소 확인 또는 동시 접속 제어등으로 공격에 대한 방어를 할 수 있음
내일은 강사님 출장, 다른 강사님이 수업